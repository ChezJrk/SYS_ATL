
#pragma once
#ifndef TEST_CASE_H
#define TEST_CASE_H

#ifdef __cplusplus
extern "C" {
#endif


#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif

typedef struct test_case_Context { 

} test_case_Context;
struct exo_win_1f32{
    float *data;
    int_fast32_t strides[1];
};
// conv_specialized(
//     inp : f32[5,82,102,128]  @DRAM,
//     output : f32[5,80,100,128]  @DRAM,
//     weights : f32[128,3,3,128]  @DRAM,
//     bias : f32[128]  @DRAM
// )
void conv_specialized( test_case_Context *ctxt, const float* inp, float* output, const float* weights, const float* bias );



#ifdef __cplusplus
}
#endif
#endif  // TEST_CASE_H

#include "test_case.h"


static int _floor_div(int num, int quot) {
  int off = (num>=0)? 0 : quot-1;
  return (num-off)/quot;
}

static int8_t _clamp_32to8(int32_t x) {
  return (x < -128)? -128 : ((x > 127)? 127 : x);
}

#include <immintrin.h>
#include <stdio.h>
#include <stdlib.h>

double _relu_(double x) {
    if (x > 0.0) return x;
    else return 0.0;
}


// conv_specialized(
//     inp : f32[5,82,102,128]  @DRAM,
//     output : f32[5,80,100,128]  @DRAM,
//     weights : f32[128,3,3,128]  @DRAM,
//     bias : f32[128]  @DRAM
// )
void conv_specialized( test_case_Context *ctxt, const float* inp, float* output, const float* weights, const float* bias ) {
for (int oc_o = 0; oc_o < 2; oc_o++) {
  for (int n = 0; n < 5; n++) {
    for (int oy = 0; oy < 80; oy++) {
      for (int ox_o = 0; ox_o < 20; ox_o++) {
        __m512 res[5][4];
        for (int ox_i = 0; ox_i < 5; ox_i++) {
          for (int oc_u = 0; oc_u < 4; oc_u++) {
            res[ox_i][oc_u] = _mm512_loadu_ps(&bias[(16 * oc_u + 64 * oc_o) * (1)]);
          }
        }
        for (int ky = 0; ky < 3; ky++) {
          for (int kx = 0; kx < 3; kx++) {
            for (int kc_o = 0; kc_o < 64; kc_o++) {
              for (int kc_i = 0; kc_i < 2; kc_i++) {
                for (int ox_i = 0; ox_i < 5; ox_i++) {
                  for (int oc_u = 0; oc_u < 4; oc_u++) {
                    __m512 wt_vec;
                    wt_vec = _mm512_loadu_ps(&weights[(kc_i + 2 * kc_o) * (3 * 3 * 128) + (ky) * (3 * 128) + (kx) * (128) + (16 * oc_u + 64 * oc_o) * (1)]);
                    __m512 in_vec;
                    (in_vec) = _mm512_set1_ps(inp[(n) * (82 * 102 * 128) + (ky + oy) * (102 * 128) + (kx + ox_i + 5 * ox_o) * (128) + (kc_i + 2 * kc_o) * (1)]);
                    res[ox_i][oc_u] = _mm512_fmadd_ps((wt_vec), (in_vec), res[ox_i][oc_u]);
                  }
                }
              }
            }
          }
        }
        for (int ox_i = 0; ox_i < 5; ox_i++) {
          for (int oc_u = 0; oc_u < 4; oc_u++) {
            __m512 relu_v;
            relu_v = _mm512_max_ps(res[ox_i][oc_u], (__m512){0});
            _mm512_storeu_ps(&output[(n) * (80 * 100 * 128) + (oy) * (100 * 128) + (ox_i + 5 * ox_o) * (128) + (16 * oc_u + 64 * oc_o) * (1)], relu_v);
          }
        }
      }
    }
  }
}
}


/* relying on the following instruction..."
mm512_fmadd_ps(A,B,C)
{C_data} = _mm512_fmadd_ps({A}, {B}, {C_data});
*/

/* relying on the following instruction..."
mm512_loadu_ps(dst,src)
{dst_data} = _mm512_loadu_ps(&{src_data});
*/

/* relying on the following instruction..."
mm512_relu_ps(dst,src)
{dst_data} = _mm512_max_ps({src_data}, (__m512){{0}});
*/

/* relying on the following instruction..."
mm512_set1_ps(dst,src)
{dst} = _mm512_set1_ps({src_data});
*/

/* relying on the following instruction..."
mm512_storeu_ps(dst,src)
_mm512_storeu_ps(&{dst_data}, {src_data});
*/
