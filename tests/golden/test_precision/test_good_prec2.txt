
#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define EXO_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define EXO_HAS_BUILTIN(builtin) (0)
#endif

#if EXO_HAS_BUILTIN(__builtin_assume)
#  define EXO_ASSUME(expr) __builtin_assume(expr)
#elif EXO_HAS_BUILTIN(__builtin_unreachable)
#  define EXO_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define EXO_ASSUME(expr) ((void)(expr))
#endif

#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && !defined(__cplusplus)
#define exo_restrict restrict
#else
#define exo_restrict
#endif



// hoge(
//     n : size,
//     x : f32[n] @DRAM,
//     y : f32[n] @DRAM
// )
void hoge( void *exo_restrict ctxt, int_fast32_t n, const float*exo_restrict x, const float*exo_restrict y );


#include <stdio.h>
#include <stdlib.h>

// dot(
//     m : size,
//     x : f32[m] @DRAM,
//     y : f32[m] @DRAM,
//     r : f32 @DRAM
// )
static void dot( void *exo_restrict ctxt, int_fast32_t m, const float*exo_restrict x, const float*exo_restrict y, float*exo_restrict r );

// dot(
//     m : size,
//     x : f32[m] @DRAM,
//     y : f32[m] @DRAM,
//     r : f32 @DRAM
// )
static void dot( void *exo_restrict ctxt, int_fast32_t m, const float*exo_restrict x, const float*exo_restrict y, float*exo_restrict r ) {
*r = 0.0f;
for (int_fast32_t i = 0; i < m; i++) {
  *r += x[i] * y[i];
}
}

// hoge(
//     n : size,
//     x : f32[n] @DRAM,
//     y : f32[n] @DRAM
// )
void hoge( void *exo_restrict ctxt, int_fast32_t n, const float*exo_restrict x, const float*exo_restrict y ) {
float xy;
dot(ctxt,n,x,y,&xy);
}

