
#include <stdint.h>
#include <stdbool.h>

// Compiler feature macros adapted from Hedley (public domain)
// https://github.com/nemequ/hedley

#if defined(__has_builtin)
#  define SYS_ATL_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
#  define SYS_ATL_HAS_BUILTIN(builtin) (0)
#endif

#if SYS_ATL_HAS_BUILTIN(__builtin_assume)
#  define SYS_ATL_ASSUME(expr) __builtin_assume(expr)
#elif SYS_ATL_HAS_BUILTIN(__builtin_unreachable)
#  define SYS_ATL_ASSUME(expr) \
      ((void)((expr) ? 1 : (__builtin_unreachable(), 1)))
#else
#  define SYS_ATL_ASSUME(expr) ((void)(expr))
#endif

typedef struct c_code_str_Context { 

} c_code_str_Context;


// hoge(
//     n : size,
//     x : f32[n]  @DRAM,
//     y : f32[n]  @DRAM
// )
void hoge( c_code_str_Context *ctxt, int_fast32_t n, float* x, float* y );


static int _floor_div(int num, int quot) {
  int off = (num>=0)? 0 : quot-1;
  return (num-off)/quot;
}

static int8_t _clamp_32to8(int32_t x) {
  return (x < -128)? -128 : ((x > 127)? 127 : x);
}

#include <stdio.h>
#include <stdlib.h>


// dot(
//     m : size,
//     x : f32[m]  @DRAM,
//     y : f32[m]  @DRAM,
//     r : f32  @DRAM
// )
void dot( c_code_str_Context *ctxt, int_fast32_t m, float* x, float* y, float* r ) {
*r = 0.0;
for (int i = 0; i < m; i++) {
  *r += x[(i) * (1)] * y[(i) * (1)];
}
}

// hoge(
//     n : size,
//     x : f32[n]  @DRAM,
//     y : f32[n]  @DRAM
// )
void hoge( c_code_str_Context *ctxt, int_fast32_t n, float* x, float* y ) {
float xy;
dot(ctxt,n,x,y,&xy);
}
