def recursive(n: size, y: R[n] @ DRAM, x: R[n] @ DRAM):
    assert n > 2
    assert (-2 + n) % 4 == 0
    for io in seq(0, (-2 + n) / 4):
        y_tmp: R[4] @ DRAM
        y_tmp[0] = y[1 + 4 * io] + y[4 * io] + x[4 * io]
        y_tmp[1] = y[1 + 4 * io] + y[4 * io] + x[4 * io] + y[1 + 4 * io] + x[
            1 + 4 * io]
        y_tmp[2] = y[1 + 4 * io] + y[4 * io] + x[4 * io] + y[1 + 4 * io] + x[
            1 + 4 * io] + (y[1 + 4 * io] + y[4 * io] + x[4 * io]) + x[2 +
                                                                      4 * io]
        y_tmp[3] = y[1 + 4 * io] + y[4 * io] + x[4 * io] + y[1 + 4 * io] + x[
            1 + 4 * io] + (y[1 + 4 * io] + y[4 * io] + x[4 * io]) + x[
                2 + 4 * io] + (y[1 + 4 * io] + y[4 * io] + x[4 * io] +
                               y[1 + 4 * io] + x[1 + 4 * io]) + x[3 + 4 * io]
        for i0 in seq(0, 4):
            y[2 + i0 + 4 * io] = y_tmp[i0]